{"version":3,"sources":["constants.js","store/actions.js","store/reducers.js","components/AddCity/AddCity.js","components/AddCity/AddCityContainer.js","components/Loader/Loader.js","components/Weather/Weather.js","components/WeatherList/WeatherList.js","components/WeatherList/WeatherListContainer.js","components/Clouds/Clouds.js","components/App/App.js","components/App/AppContainer.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","DEFAULT_COORDS","fetchWeatherPending","id","type","fetchWeatherSuccess","weather","fetchWeatherError","error","getCities","state","weatherList","cities","getNextCityId","nextCityId","getCurrentCity","currentCity","combineReducers","constants","action","changedCities","map","city","pending","name","filter","AddCity","props","handleFormInput","bind","e","preventDefault","this","addCity","target","value","className","onSubmit","placeholder","required","React","Component","connect","dispatch","Loader","Weather","data","isError","isCurrentCity","fetchWeather","styleWeather","flexDirection","width","fontSize","styleMainInfo","paddingRight","dataRow","paddingLeft","boxSizing","notFound","response","status","onClick","deleteCity","style","justifyContent","padding","temp","main","toFixed","icon","description","toUpperCase","substr","rot","wind","deg","windDirStyle","WebkitTransform","msTransform","OTransform","transform","windSpeed","speed","pressure","humidity","coords","coord","lon","lat","src","title","clouds","all","nextProps","prevState","WeatherList","key","fetchWeatherByName","cityName","axios","get","then","console","log","catch","fetchWeatherByNameAction","Clouds","i","push","cloud","App","alignSelf","fetchWeatherByCoords","latitude","longitude","navigator","geolocation","getCurrentPosition","position","err","code","alert","warn","message","enableHighAccuracy","timeout","maximumAge","Boolean","window","location","hostname","match","localStorage","JSON","parse","reduce","prev","cur","Math","max","store","createStore","rootReducer","applyMiddleware","thunk","subscribe","stringify","getState","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"uUAOaA,EAAgB,CACzB,YAAe,CACX,OAAU,GACV,WAAc,GAElB,YAAe,CACX,GAAM,IAIDC,EAAiB,CAC1B,UAAa,MACb,SAAY,OCPHC,EAAsB,SAACC,GAAD,MAAS,CACxCC,KDbiC,wBCcjCD,OAGSE,EAAsB,SAACC,EAASH,GAAV,MAAkB,CACjDC,KDjBiC,wBCkBjCD,KACAG,YAGSC,EAAoB,SAACC,EAAOL,GAAR,MAAgB,CAC7CC,KDtB+B,sBCuB/BD,KACAK,U,ylBCvBJ,IA4FaC,EAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,QACvCC,EAAgB,SAAAH,GAAK,OAAIA,EAAMC,YAAYG,YAC3CC,EAAiB,SAAAL,GAAK,OAAIA,EAAMM,aAE9BC,cAAgB,CAC3BN,YAjGmB,WAA+D,IAA9DD,EAA6D,uDAArDQ,EAAwBP,YAAaQ,EAAgB,uDAAP,GACtEC,EAAgB,GAEpB,GAAkB,IAAdD,EAAOhB,GACP,OAAOO,EAGX,OAAQS,EAAOf,MACX,IFX6B,wBEezB,OAHAgB,EAAgBV,EAAME,OAAOS,KAAI,SAAAC,GAAI,OAC7BA,EAAKnB,KAAOgB,EAAOhB,GAAnB,KAA4BmB,EAA5B,CAAkCC,SAAS,IAAQD,KAEpD,EAAP,GACOZ,EADP,CAEIE,OAAQQ,IAGhB,IFnB6B,wBEuBzB,OAHAA,EAAgBV,EAAME,OAAOS,KAAI,SAAAC,GAAI,OAC7BA,EAAKnB,KAAOgB,EAAOhB,GAAnB,KAA4BmB,EAA5B,CAAkCC,SAAS,EAAOjB,QAASa,EAAOb,UAAWgB,KAE9E,EAAP,GACOZ,EADP,CAEIE,OAAQQ,IAGhB,IF3B2B,sBE+BvB,OAHAA,EAAgBV,EAAME,OAAOS,KAAI,SAAAC,GAAI,OAC7BA,EAAKnB,KAAOgB,EAAOhB,GAAnB,KAA4BmB,EAA5B,CAAkCC,SAAS,EAAOf,MAAOW,EAAOX,QAASc,KAE1E,EAAP,GACOZ,EADP,CAEIE,OAAQQ,IAGhB,IFlCgB,WE0CR,OAPAA,EAAa,sBACNV,EAAME,QADA,CAET,CACIT,GAAIO,EAAMI,WACVU,KAAML,EAAOK,QAGd,EAAP,GACOd,EADP,CAEII,WAAYJ,EAAMI,WAAa,EAC/BF,OAAQQ,IAGhB,IF/Ce,cEiDX,OADAA,EAAgBV,EAAME,OAAOa,QAAO,SAAAH,GAAI,OAAIA,EAAKnB,KAAOgB,EAAOhB,MACxD,EAAP,GACOO,EADP,CAEIE,OAAQQ,IAGpB,QACI,OAAOV,IAyCfM,YArCuB,WAA+D,IAA9DN,EAA6D,uDAArDQ,EAAwBF,YAAaG,EAAgB,uDAAP,GAC9E,GAAkB,IAAdA,EAAOhB,GACP,OAAOO,EAGX,OAAQS,EAAOf,MACX,IFtE6B,wBEuEzB,OAAO,EAAP,GACOM,EADP,CAEIa,SAAS,IAGjB,IF3E6B,wBE4EzB,OAAO,EAAP,GACOb,EADP,CAEIa,SAAS,EACTjB,QAASa,EAAOb,UAGxB,IFjF2B,sBEkFvB,OAAO,EAAP,GACOI,EADP,CAEIa,SAAS,EACTf,MAAOW,EAAOX,QAGtB,QACI,OAAOE,M,mDC3DJgB,E,YA7Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAHN,E,6EAMHC,GACdA,EAAEC,iBACFC,KAAKL,MAAMM,QAAQH,EAAEI,OAAO,GAAGC,S,+BAI/B,OACE,yBAAKC,UAAU,WACb,0BAAMC,SAAUL,KAAKJ,iBACnB,2BACEzB,GAAG,UACHmC,YAAY,eACZC,UAAQ,IAEV,4BAAQnC,KAAK,SAASgC,UAAU,UAAhC,W,GArBYI,IAAMC,WCYbC,eATS,SAAAhC,GAAK,MAAK,CAChCI,WAAYD,EAAcH,GAC1BE,OAAQH,EAAUC,OAGO,SAAAiC,GAAQ,MAAK,CACtCV,QAAS,SAAAT,GAAI,OAAImB,EHTI,SAACnB,GAAD,MAAW,CAC9BpB,KDCoB,WCApBoB,QGOwBS,CAAQT,QAGrBkB,CAA6ChB,GCI7CkB,G,kBAdb,WAAYjB,GAAQ,qEACZA,I,sEAIN,OACE,yBAAKS,UAAU,UACb,6DACA,6BAAK,uBAAGA,UAAU,kC,GATLI,IAAMC,YCkKZI,G,kBAhKb,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDjB,MAAQ,CACXa,QACqC,qBAA5B,EAAKI,MAAMmB,KAAKvB,SACnB,EAAKI,MAAMmB,KAAKvB,QAEtBwB,QAA0C,qBAA1B,EAAKpB,MAAMmB,KAAKtC,MAChCwC,cAAsC,IAAvB,EAAKrB,MAAMmB,KAAK3C,IAThB,E,iFAcjB6B,KAAKL,MAAMsB,iB,+BAgBX,IAAMC,EAAgBlB,KAAKtB,MAAMsC,cAE7B,CAAEG,cAAe,MAAOC,MAAO,OAAQC,SAAU,QADjD,CAAEF,cAAe,UAEfG,EAAiBtB,KAAKtB,MAAMsC,cAE9B,CAAEG,cAAe,SAAUC,MAAO,MAAOG,aAAc,QADvD,CAAEJ,cAAe,OAEfK,EAAWxB,KAAKtB,MAAMsC,cAExB,CAAEI,MAAO,MAAOK,YAAa,OAAQC,UAAW,cADhD,CAAEN,MAAO,QAGb,GAAIpB,KAAKtB,MAAMqC,QAAS,CACtB,IAAMvC,EAAQwB,KAAKL,MAAMmB,KAAKtC,MAC1BmD,GAAW,EAIf,MAH8B,qBAAnBnD,EAAMoD,WACfD,EAAqC,MAA1BnD,EAAMoD,SAASC,QAG1B,yBAAKzB,UAAU,iBACZuB,EACC,6BAAM3B,KAAKL,MAAMmB,KAAKtB,KAAtB,gBAEA,0EAEAQ,KAAKtB,MAAMsC,eACX,4BAAQc,QAAS9B,KAAKL,MAAMoC,WAAY3B,UAAU,UAAlD,MAMD,GAAKJ,KAAKtB,MAAMa,QAwFrB,OACE,yBAAKa,UAAU,UAAU4B,MAAO,CAAEC,eAAgB,gBAC9CjC,KAAKtB,MAAMsC,eACX,yBAAKgB,MAAO,CAAEE,QAAS,QAAUlC,KAAKL,MAAMmB,KAAKtB,MAEnD,kBAAC,EAAD,OA5FJ,IAAMsB,EAAOd,KAAKL,MAAMmB,KAAKxC,QAEvB6D,EAAI,UAAMrB,EAAKsB,KAAKD,KAAO,EAAI,GAAK,KAAhC,OAAsCrB,EAAKsB,KAAKD,KAAKE,QAC7D,GADQ,SAGJC,EAAQtC,KAAKtB,MAAMsC,cAAZ,yFAEyEF,EAAKxC,QAAQ,GAAGgE,KAFzF,oDAC4BxB,EAAKxC,QAAQ,GAAGgE,KAD5C,QAGPC,EACJzB,EAAKxC,QAAQ,GAAGiE,YAAY,GAAGC,cAC/B1B,EAAKxC,QAAQ,GAAGiE,YAAYE,OAAO,GAC/BC,EAAG,iBAAa5B,EAAK6B,KAAKC,IAAvB,QACHC,EAAe,CACnBC,gBAAiBJ,EACjBK,YAAaL,EACbM,WAAYN,EACZO,UAAWP,GAEPQ,EAAS,UAAMpC,EAAK6B,KAAKQ,MAAhB,QACTC,EAAQ,WAA4B,gBAArBtC,EAAKsB,KAAKgB,UAA6Bf,QAC1D,GADY,SAGRgB,EAAQ,UAAMvC,EAAKsB,KAAKiB,SAAhB,KACRC,EAAS,CAACxC,EAAKyC,MAAMC,IAAK1C,EAAKyC,MAAME,KAE3C,OACE,yBAAKrD,UAAU,UAAU4B,MAAOd,GAC9B,yBAAKd,UAAU,WAAW4B,MAAOV,GAC/B,yBAAKlB,UAAWJ,KAAKtB,MAAMsC,cAAgB,cAAgB,QACxDF,EAAKtB,MAER,yBACEY,UAAS,UACPJ,KAAKtB,MAAMsC,cAAgB,UAAY,GADhC,cAIT,yBAAKZ,UAAWJ,KAAKtB,MAAMsC,cAAgB,OAAS,IACjDmB,GAEH,yBAAKuB,IAAKpB,EAAMqB,MAAOpB,KAEzB,yBAAKnC,UAAWJ,KAAKtB,MAAMsC,cAAgB,UAAY,KACnDhB,KAAKtB,MAAMsC,eACX,4BAAQc,QAAS9B,KAAKL,MAAMoC,WAAY3B,UAAU,UAAlD,OAMN,yBAAK4B,MAAOR,GACV,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,UAAf,SACA,yBAAKA,UAAU,UACb,yBAAKjC,GAAG,QACN,yBAAKA,GAAG,KAAR,KACA,yBAAKA,GAAG,KAAR,KACA,yBAAKA,GAAG,iBACN,yBAAK6D,MAAOa,GAAZ,WAEF,yBAAK1E,GAAG,KAAR,KACA,yBAAKA,GAAG,KAAR,MAED+E,IAGL,yBAAK9C,UAAU,OACb,yBAAKA,UAAU,UAAf,WACA,yBAAKA,UAAU,UAAUU,EAAK8C,OAAOC,IAArC,MAEF,yBAAKzD,UAAU,OACb,yBAAKA,UAAU,UAAf,aACA,yBAAKA,UAAU,UAAUgD,IAE3B,yBAAKhD,UAAU,OACb,yBAAKA,UAAU,UAAf,aACA,yBAAKA,UAAU,UAAUiD,IAE3B,yBAAKjD,UAAU,OACb,yBAAKA,UAAU,UAAf,WACA,yBAAKA,UAAU,UAAf,IACIkD,EAAO,GADX,KACiBA,EAAO,GADxB,W,gDA3HoBQ,EAAWC,GACzC,MACoC,qBAA3BD,EAAUhD,KAAKvB,SACtBuE,EAAUhD,KAAKvB,UAAYwE,EAAUxE,QAE9B,CACLA,QAASuE,EAAUhD,KAAKvB,QACxBwB,QAAyC,qBAAzB+C,EAAUhD,KAAKtC,OAErB,S,GA3BIgC,IAAMC,YCebuD,E,YAfb,WAAYrE,GAAQ,qEACZA,I,sEAGE,IAAD,OACP,OACE,yBAAKS,UAAU,eACVJ,KAAKL,MAAMf,OAAOS,KAAI,SAAAC,GAAI,OACvB,kBAAC,EAAD,CAAS2E,IAAK3E,EAAKnB,GAAI2C,KAAMxB,EAAM2B,aAAc,kBAAM,EAAKtB,MAAMuE,mBAAmB5E,EAAKnB,GAAImB,EAAKE,OAAOuC,WAAY,kBAAM,EAAKpC,MAAMoC,WAAWzC,EAAKnB,e,GAT3IqC,IAAMC,WC8BjBC,eAVS,SAAChC,GAAD,MAAY,CAChCE,OAAQH,EAAUC,GAClBI,WAAYD,EAAcH,OAGH,SAACiC,GAAD,MAAe,CACtCuD,mBAAoB,SAAC/F,EAAIqB,GAAL,OAAcmB,EAvBE,SAACxC,EAAIgG,GACzC,OAAO,SAAAxD,GACHA,EAASzC,EAAoBC,IAC7BiG,IACKC,IADL,4DAC8DF,EAD9D,yDAEKG,MAAK,SAAA1C,GACFjB,EAAStC,EAAoBuD,EAASd,KAAM3C,IAC5CoG,QAAQC,IAAI5C,EAASd,SAExB2D,OAAM,SAAAjG,GACHmC,EAASpC,EAAkBC,EAAOL,IAClCoG,QAAQC,IAAIhG,OAYmBkG,CAAyBvG,EAAIqB,KACxEuC,WAAY,SAAA5D,GAAE,OAAIwC,EPvBI,SAACxC,GAAD,MAAS,CAC/BC,KDHuB,cCIvBD,MOqB2B4D,CAAW5D,QAG3BuC,CAA6CsD,GCf7CW,G,YAfA,WAEX,IADA,IAAIf,EAAS,GACJgB,EAAI,EAAGA,GAAK,GAAIA,IACrBhB,EAAOiB,KAAK,IAAMD,GAKtB,OAHAhB,EAASA,EAAOvE,KAAI,SAACyF,GAAD,OAChB,yBAAK1E,UAAS,gBAAW0E,GAASb,IAAKa,OAGvC,yBAAK1E,UAAU,UACVwD,KCqBEmB,E,YAzBb,WAAYpF,GAAQ,qEACZA,I,sEAGE,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKS,UAAU,OACb,yBAAKA,UAAU,UAAU4B,MAAO,CAAC,MAAS,MAAOgD,UAAW,eAC1D,4CACA,4BAAQlD,QAAS,kBAAM,EAAKnC,MAAMsF,yBAAlC,uBAEF,kBAAC,EAAD,CAAShB,IAAK,EAAGnD,KAAMd,KAAKL,MAAMX,YAAaiC,aAAc,kBAAM,EAAKtB,MAAMsF,0BAC9E,yBAAK7E,UAAU,sBACb,yCACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,Y,GAnBQI,IAAMC,WCDlBQ,EAAe,SAACN,EAAU2C,EAAQnF,GACpCiG,IACKC,IADL,8DACgEf,EAAO4B,SAAS7C,QAAQ,GADxF,gBACkGiB,EAAO6B,UAAU9C,QAAQ,GAD3H,yDAEKiC,MAAK,SAAA1C,GACFjB,EAAStC,EAAoBuD,EAASd,KAAM3C,IAC5CoG,QAAQC,IAAI5C,EAASd,SAExB2D,OAAM,SAAAjG,GACHmC,EAASpC,EAAkBC,EAAOL,IAClCoG,QAAQC,IAAIhG,OAsDTkC,eARS,SAAChC,GAAD,MAAY,CAChCM,YAAaD,EAAeL,OAGL,SAACiC,GAAD,MAAe,CACtCsE,qBAAsB,kBAAMtE,GA9CrB,SAAAA,GAUH,GAFAA,EAASzC,EAPE,IASNkH,UAAUC,YAKXD,UAAUC,YAAYC,oBAAmB,SAACC,GACtCtE,EAAaN,EAAU4E,EAASjC,OAf7B,MAgBJ,SAAAkC,GACC,OAAOA,EAAIC,MACP,KAAK,EACDC,MAAM,4DACNzE,EAAaN,EAAU1C,EApB5B,GAqBK,MACJ,KAAK,EACDyH,MAAM,+DACNzE,EAAaN,EAAU1C,EAxB5B,GAyBK,MACJ,KAAK,EACD0C,EAASpC,EAAkBiH,EA3BhC,IA4BK,MACJ,QACI7E,EAASpC,EAAkBiH,EA9BhC,IA+BKjB,QAAQoB,KAAR,gBAAsBH,EAAIC,KAA1B,cAAoCD,EAAII,aA9BxC,CACZC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,QAKY,CACxB,IAAMvH,EAAQ,+BACdmC,EAASpC,EAAkBC,EAXpB,IAYP+F,QAAQC,IAAIhG,WAoCTkC,CAA6CqE,GC1DxCiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qkBCNN,IAAMxH,EAASyH,aAAa,eAAiBC,KAAKC,MAAMF,aAAa,gBAAkB,GACjFvH,EAAaF,EAAO4H,QAAO,SAACC,EAAMC,GACpC,OAAOC,KAAKC,IAAIH,EAAMC,EAAIvI,MAC3B,GAAK,EAEFO,EAAK,KACJV,EADI,CAEPW,YAAY,KACLX,EAAcW,YADV,CAEPC,SACAE,iBAIF+H,EAAQC,YAAYC,EAAarI,EAAOsI,YAAgBC,MAE9DJ,EAAMK,WAAU,WACZb,aAAa,eAAiBC,KAAKa,UAAUN,EAAMO,WAAWzI,YAAYC,OAAOS,KAAI,SAAAC,GAAI,MAAK,CAACnB,GAAImB,EAAKnB,GAAIqB,KAAMF,EAAKE,aAG3H6H,IAASC,OACL,kBAAC,IAAD,CAAUT,MAAOA,GACb,kBAAC,EAAD,OAEJU,SAASC,eAAe,SD6FtB,kBAAmBpC,WACrBA,UAAUqC,cAAcC,MAAMpD,MAAK,SAAAqD,GACjCA,EAAaC,kB","file":"static/js/main.36d132eb.chunk.js","sourcesContent":["export const FETCH_WEATHER_PENDING = 'FETCH_WEATHER_PENDING';\r\nexport const FETCH_WEATHER_SUCCESS = 'FETCH_WEATHER_SUCCESS';\r\nexport const FETCH_WEATHER_ERROR = 'FETCH_WEATHER_ERROR';\r\n\r\nexport const ADD_CITY = 'ADD_CITY';\r\nexport const DELETE_CITY = 'DELETE_CITY';\r\n\r\nexport const INITIAL_STATE = {\r\n    'weatherList': {\r\n        'cities': [],\r\n        'nextCityId': 1,\r\n    },\r\n    'currentCity': {\r\n        'id': 0\r\n    }  \r\n}\r\n\r\nexport const DEFAULT_COORDS = {\r\n    'longitude': 30.32,\r\n    'latitude': 59.94\r\n};","import * as constants from '../constants';\r\n\r\nexport const addCity = (name) => ({\r\n    type: constants.ADD_CITY,\r\n    name\r\n});\r\n\r\nexport const deleteCity = (id) => ({\r\n    type: constants.DELETE_CITY,\r\n    id\r\n});\r\n\r\nexport const fetchWeatherPending = (id) => ({\r\n    type: constants.FETCH_WEATHER_PENDING,\r\n    id\r\n});\r\n\r\nexport const fetchWeatherSuccess = (weather, id) => ({\r\n    type: constants.FETCH_WEATHER_SUCCESS,\r\n    id,\r\n    weather\r\n});\r\n\r\nexport const fetchWeatherError = (error, id) => ({\r\n    type: constants.FETCH_WEATHER_ERROR,\r\n    id,\r\n    error\r\n});","import * as constants from '../constants';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst weatherReducer = (state = constants.INITIAL_STATE.weatherList, action = {}) => {\r\n    let changedCities = [];\r\n\r\n    if (action.id === 0) {\r\n        return state;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case constants.FETCH_WEATHER_PENDING:\r\n            changedCities = state.cities.map(city => \r\n                    city.id === action.id ? {...city, pending: true} : city\r\n                );\r\n            return {\r\n                ...state,\r\n                cities: changedCities\r\n            };\r\n\r\n        case constants.FETCH_WEATHER_SUCCESS:\r\n            changedCities = state.cities.map(city => \r\n                    city.id === action.id ? {...city, pending: false, weather: action.weather} : city\r\n                );\r\n            return {\r\n                ...state,\r\n                cities: changedCities\r\n            };\r\n\r\n        case constants.FETCH_WEATHER_ERROR:\r\n            changedCities = state.cities.map(city => \r\n                    city.id === action.id ? {...city, pending: false, error: action.error} : city\r\n                );\r\n            return {\r\n                ...state,\r\n                cities: changedCities\r\n            };\r\n\r\n        case constants.ADD_CITY:\r\n                changedCities = [\r\n                    ...state.cities,\r\n                    {\r\n                        id: state.nextCityId,\r\n                        name: action.name\r\n                    }\r\n                ] \r\n                return {\r\n                    ...state,\r\n                    nextCityId: state.nextCityId + 1,\r\n                    cities: changedCities\r\n                };\r\n    \r\n            case constants.DELETE_CITY:\r\n                changedCities = state.cities.filter(city => city.id !== action.id);\r\n                return {\r\n                    ...state,\r\n                    cities: changedCities\r\n                };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst currentCityReducer = (state = constants.INITIAL_STATE.currentCity, action = {}) => {\r\n    if (action.id !== 0) {\r\n        return state;\r\n    }\r\n    \r\n    switch (action.type) {\r\n        case constants.FETCH_WEATHER_PENDING:\r\n            return {\r\n                ...state,\r\n                pending: true\r\n            };\r\n\r\n        case constants.FETCH_WEATHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                weather: action.weather\r\n            };\r\n\r\n        case constants.FETCH_WEATHER_ERROR:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                error: action.error\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const getCities = state => state.weatherList.cities;\r\nexport const getNextCityId = state => state.weatherList.nextCityId;\r\nexport const getCurrentCity = state => state.currentCity;\r\n\r\nexport default combineReducers({\r\n    weatherList: weatherReducer,\r\n    currentCity: currentCityReducer\r\n});","import React from \"react\";\r\n\r\nclass AddCity extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleFormInput = this.handleFormInput.bind(this);\r\n  }\r\n\r\n  handleFormInput(e) {\r\n    e.preventDefault();\r\n    this.props.addCity(e.target[0].value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"AddCity\">\r\n        <form onSubmit={this.handleFormInput}>\r\n          <input\r\n            id=\"addCity\"\r\n            placeholder=\"Add new city\"\r\n            required\r\n          />\r\n          <button type=\"submit\" className=\"circle\">\r\n            +\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddCity;\r\n","import { connect } from \"react-redux\";\r\nimport { addCity } from \"../../store/actions\";\r\nimport AddCity from \"./AddCity\";\r\nimport { getNextCityId, getCities } from \"../../store/reducers\";\r\n\r\nconst mapStateToProps = state => ({\r\n  nextCityId: getNextCityId(state),\r\n  cities: getCities(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addCity: name => dispatch(addCity(name))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCity);\r\n","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nclass Loader extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"Loader\">\r\n        <div>Please wait, data is loading</div>\r\n        <div><i className=\"fas fa-spinner fa-pulse\"></i></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport \"./Weather.scss\";\r\n\r\nclass Weather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pending:\r\n        typeof this.props.data.pending !== \"undefined\"\r\n          ? this.props.data.pending\r\n          : true,\r\n      isError: typeof this.props.data.error !== \"undefined\",\r\n      isCurrentCity: this.props.data.id === 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchWeather();\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (\r\n      typeof nextProps.data.pending !== \"undefined\" &&\r\n      nextProps.data.pending !== prevState.pending\r\n    ) {\r\n      return {\r\n        pending: nextProps.data.pending,\r\n        isError: typeof nextProps.data.error !== \"undefined\"\r\n      };\r\n    } else return null;\r\n  }\r\n\r\n  render() {\r\n    const styleWeather = !this.state.isCurrentCity\r\n      ? { flexDirection: \"column\" }\r\n      : { flexDirection: \"row\", width: \"100%\", fontSize: \"30px\" };\r\n    const styleMainInfo = !this.state.isCurrentCity\r\n      ? { flexDirection: \"row\" }\r\n      : { flexDirection: \"column\", width: \"50%\", paddingRight: \"20px\" };\r\n    const dataRow = !this.state.isCurrentCity\r\n      ? { width: \"100%\" }\r\n      : { width: \"50%\", paddingLeft: \"20px\", boxSizing: \"border-box\" };\r\n\r\n    if (this.state.isError) {\r\n      const error = this.props.data.error;\r\n      let notFound = false;\r\n      if (typeof error.response !== \"undefined\") {\r\n        notFound = error.response.status === 404;\r\n      }\r\n      return (\r\n        <div className=\"Weather error\">\r\n          {notFound ? (\r\n            <div>{this.props.data.name} isn't found</div>\r\n          ) : (\r\n            <div>Poor connection. Please, try again later</div>\r\n          )}\r\n          {!this.state.isCurrentCity && (\r\n            <button onClick={this.props.deleteCity} className=\"circle\">\r\n              x\r\n            </button>\r\n          )}\r\n        </div>\r\n      );\r\n    } else if (!this.state.pending) {\r\n      const data = this.props.data.weather;\r\n\r\n      const temp = `${data.main.temp < 0 ? \"\" : \"+\"}${data.main.temp.toFixed(\r\n        1\r\n      )}°C`;\r\n      const icon = !this.state.isCurrentCity\r\n        ? `https://openweathermap.org/img/wn/${data.weather[0].icon}.png`\r\n        : `https://openweathermap.org/themes/openweathermap/assets/vendor/owm/img/widgets/${data.weather[0].icon}.png`;\r\n      const description =\r\n        data.weather[0].description[0].toUpperCase() +\r\n        data.weather[0].description.substr(1);\r\n      const rot = `rotate(${data.wind.deg}deg)`;\r\n      const windDirStyle = {\r\n        WebkitTransform: rot,\r\n        msTransform: rot,\r\n        OTransform: rot,\r\n        transform: rot\r\n      };\r\n      const windSpeed = `${data.wind.speed} m/s`;\r\n      const pressure = `${(data.main.pressure * 0.75006375541921).toFixed(\r\n        0\r\n      )} mmHg`;\r\n      const humidity = `${data.main.humidity}%`;\r\n      const coords = [data.coord.lon, data.coord.lat];\r\n\r\n      return (\r\n        <div className=\"Weather\" style={styleWeather}>\r\n          <div className=\"mainInfo\" style={styleMainInfo}>\r\n            <div className={this.state.isCurrentCity ? \"currentName\" : \"name\"}>\r\n              {data.name}\r\n            </div>\r\n            <div\r\n              className={`${\r\n                this.state.isCurrentCity ? \"current\" : \"\"\r\n              } cityMain`}\r\n            >\r\n              <div className={this.state.isCurrentCity ? \"temp\" : \"\"}>\r\n                {temp}\r\n              </div>\r\n              <img src={icon} title={description} />\r\n            </div>\r\n            <div className={this.state.isCurrentCity ? \"current\" : \"\"}>\r\n              {!this.state.isCurrentCity && (\r\n                <button onClick={this.props.deleteCity} className=\"circle\">\r\n                  x\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div style={dataRow}>\r\n            <div className=\"row\">\r\n              <div className=\"rowKey\">Wind:</div>\r\n              <div className=\"rowVal\">\r\n                <div id=\"wind\">\r\n                  <div id=\"N\">N</div>\r\n                  <div id=\"W\">W</div>\r\n                  <div id=\"windDirection\">\r\n                    <div style={windDirStyle}>↑</div>\r\n                  </div>\r\n                  <div id=\"E\">E</div>\r\n                  <div id=\"S\">S</div>\r\n                </div>\r\n                {windSpeed}\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"rowKey\">Clouds:</div>\r\n              <div className=\"rowVal\">{data.clouds.all}%</div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"rowKey\">Pressure:</div>\r\n              <div className=\"rowVal\">{pressure}</div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"rowKey\">Humidity:</div>\r\n              <div className=\"rowVal\">{humidity}</div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"rowKey\">Coords:</div>\r\n              <div className=\"rowVal\">\r\n                [{coords[0]}, {coords[1]}]\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"Weather\" style={{ justifyContent: \"flex-start\" }}>\r\n          {!this.state.isCurrentCity && (\r\n            <div style={{ padding: \"8px\" }}>{this.props.data.name}</div>\r\n          )}\r\n          <Loader />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport Weather from '../Weather/Weather';\r\n\r\nclass WeatherList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"WeatherList\">\r\n          {this.props.cities.map(city => (\r\n              <Weather key={city.id} data={city} fetchWeather={() => this.props.fetchWeatherByName(city.id, city.name)} deleteCity={() => this.props.deleteCity(city.id)} />\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherList;\r\n","import { connect } from 'react-redux';\r\nimport { fetchWeatherPending, fetchWeatherError, fetchWeatherSuccess, deleteCity } from '../../store/actions';\r\nimport axios from 'axios';\r\nimport WeatherList from './WeatherList';\r\nimport { getCities, getNextCityId } from '../../store/reducers';\r\n\r\nexport const fetchWeatherByNameAction = (id, cityName) => {\r\n    return dispatch => {\r\n        dispatch(fetchWeatherPending(id));\r\n        axios\r\n            .get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&APPID=96c2fc4713551153e7966978b449861a`)\r\n            .then(response => {\r\n                dispatch(fetchWeatherSuccess(response.data, id));\r\n                console.log(response.data);\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchWeatherError(error, id));\r\n                console.log(error);\r\n            });\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cities: getCities(state),\r\n    nextCityId: getNextCityId(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchWeatherByName: (id, name) => dispatch(fetchWeatherByNameAction(id, name)),\r\n    deleteCity: id => dispatch(deleteCity(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherList);","import React from 'react';\r\nimport './Clouds.scss';\r\n\r\nconst Clouds = () => {\r\n    let clouds = [];\r\n    for (let i = 1; i <= 10; i++) {\r\n        clouds.push('x' + i);\r\n    }\r\n    clouds = clouds.map((cloud) => \r\n        <div className={`cloud ${cloud}`} key={cloud}></div>\r\n    );\r\n    return (\r\n        <div className=\"clouds\">\r\n            {clouds}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Clouds;","import React from 'react';\r\nimport './App.scss';\r\nimport AddCity from '../AddCity/AddCityContainer';\r\nimport WeatherList from '../WeatherList/WeatherListContainer';\r\nimport Weather from '../Weather/Weather';\r\nimport \"../../../node_modules/@fortawesome/fontawesome-free/css/all.css\";\r\nimport Clouds from '../Clouds/Clouds';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <Clouds />\r\n        <div className=\"App\">\r\n          <div className='control' style={{'width': '67%', alignSelf: 'flex-start'}}>\r\n            <h2>Weather here</h2>\r\n            <button onClick={() => this.props.fetchWeatherByCoords()}>Update geolocation</button>\r\n          </div>\r\n          <Weather key={0} data={this.props.currentCity} fetchWeather={() => this.props.fetchWeatherByCoords()}/>\r\n          <div className='control favourites'>\r\n            <h2>Favorites</h2>\r\n            <AddCity />\r\n          </div>\r\n          <WeatherList />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { connect } from 'react-redux';\r\nimport { fetchWeatherPending, fetchWeatherError, fetchWeatherSuccess } from '../../store/actions';\r\nimport axios from 'axios';\r\nimport { getCurrentCity } from '../../store/reducers';\r\nimport App from './App';\r\nimport { DEFAULT_COORDS } from '../../constants';\r\n\r\nconst fetchWeather = (dispatch, coords, id) => {\r\n    axios\r\n        .get(`https://api.openweathermap.org/data/2.5/weather?lat=${coords.latitude.toFixed(3)}&lon=${coords.longitude.toFixed(3)}&units=metric&APPID=96c2fc4713551153e7966978b449861a`)\r\n        .then(response => {\r\n            dispatch(fetchWeatherSuccess(response.data, id));\r\n            console.log(response.data);\r\n        })\r\n        .catch(error => {\r\n            dispatch(fetchWeatherError(error, id));\r\n            console.log(error);\r\n        });\r\n}\r\n\r\nexport const fetchWeatherByCoordsAction = () => {\r\n    return dispatch => {\r\n        const id = 0;\r\n        const options = {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0\r\n        };\r\n    \r\n        dispatch(fetchWeatherPending(id));\r\n    \r\n        if (!navigator.geolocation) {\r\n            const error = 'Geolocation is not supported';\r\n            dispatch(fetchWeatherError(error, id));\r\n            console.log(error);\r\n        } else {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                fetchWeather(dispatch, position.coords, id);\r\n            }, err => {\r\n                switch(err.code) {\r\n                    case 1:\r\n                        alert('Permission denied. Load weather from default coordinates');\r\n                        fetchWeather(dispatch, DEFAULT_COORDS, id);\r\n                        break;\r\n                    case 2:\r\n                        alert('Location unavailable. Load weather from default coordinates');\r\n                        fetchWeather(dispatch, DEFAULT_COORDS, id);\r\n                        break;\r\n                    case 3:\r\n                        dispatch(fetchWeatherError(err, id));    \r\n                        break;\r\n                    default:\r\n                        dispatch(fetchWeatherError(err, id));\r\n                        console.warn(`ERROR(${err.code}): ${err.message}`);\r\n                        break;\r\n                }\r\n            }, options);\r\n        }    \r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentCity: getCurrentCity(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchWeatherByCoords: () => dispatch(fetchWeatherByCoordsAction())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/AppContainer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './store/reducers';\r\nimport {INITIAL_STATE} from './constants';\r\n\r\nconst cities = localStorage['redux-store'] ? JSON.parse(localStorage['redux-store']) : [];\r\nconst nextCityId = cities.reduce((prev, cur) => {\r\n    return Math.max(prev, cur.id);\r\n}, 0) + 1;\r\n\r\nconst state = {\r\n    ...INITIAL_STATE, \r\n    weatherList: {\r\n        ...INITIAL_STATE.weatherList, \r\n        cities, \r\n        nextCityId\r\n    }\r\n};\r\n\r\nconst store = createStore(rootReducer, state, applyMiddleware(thunk));\r\n\r\nstore.subscribe(() => {\r\n    localStorage['redux-store'] = JSON.stringify(store.getState().weatherList.cities.map(city => ({id: city.id, name: city.name})));\r\n});\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}