{"version":3,"sources":["constants.js","store/actions.js","store/reducers.js","components/AddCity/AddCity.js","components/AddCity/AddCityContainer.js","components/Loader/Loader.js","components/Weather/Weather.js","components/WeatherList/WeatherList.js","components/WeatherList/WeatherListContainer.js","components/Clouds/Clouds.js","components/App/App.js","components/App/AppContainer.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","DEFAULT_COORDS","fetchWeatherPending","id","type","fetchWeatherSuccess","weather","fetchWeatherError","error","getCities","state","weatherList","cities","getNextCityId","nextCityId","getCurrentCity","currentCity","combineReducers","constants","action","changedCities","map","city","pending","name","filter","AddCity","props","textInput","React","createRef","handleFormInput","bind","e","preventDefault","this","addCity","current","value","className","onSubmit","ref","placeholder","required","Component","connect","dispatch","Loader","Weather","fetchWeather","styleWeather","data","flexDirection","width","fontSize","styleMainInfo","paddingRight","dataRow","paddingLeft","boxSizing","response","status","onClick","deleteCity","temp","main","toFixed","icon","description","toUpperCase","substr","rot","wind","deg","windDirStyle","WebkitTransform","msTransform","OTransform","transform","windSpeed","speed","pressure","humidity","coords","coord","lon","lat","style","src","title","clouds","all","justifyContent","padding","WeatherList","key","fetchWeatherByName","cityName","axios","get","then","console","log","catch","fetchWeatherByNameAction","Clouds","i","push","cloud","App","alignSelf","fetchWeatherByCoords","latitude","longitude","navigator","geolocation","getCurrentPosition","position","err","code","warn","message","enableHighAccuracy","timeout","maximumAge","fetchWeatherByCoordsAction","Boolean","window","location","hostname","match","localStorage","JSON","parse","reduce","prev","cur","Math","max","store","createStore","rootReducer","applyMiddleware","thunk","subscribe","stringify","getState","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db244f8c.chunk.js","sourcesContent":["export const FETCH_WEATHER_PENDING = 'FETCH_WEATHER_PENDING';\r\nexport const FETCH_WEATHER_SUCCESS = 'FETCH_WEATHER_SUCCESS';\r\nexport const FETCH_WEATHER_ERROR = 'FETCH_WEATHER_ERROR';\r\n\r\nexport const ADD_CITY = 'ADD_CITY';\r\nexport const DELETE_CITY = 'DELETE_CITY';\r\n\r\nexport const INITIAL_STATE = {\r\n    'weatherList': {\r\n        'cities': [],\r\n        'nextCityId': 1,\r\n    },\r\n    'currentCity': {\r\n        'id': 0\r\n    }  \r\n}\r\n\r\nexport const DEFAULT_COORDS = {\r\n    'longitude': 30.32,\r\n    'latitude': 59.94\r\n};","import * as constants from '../constants';\r\n\r\nexport const addCity = (name) => ({\r\n    type: constants.ADD_CITY,\r\n    name\r\n});\r\n\r\nexport const deleteCity = (id) => ({\r\n    type: constants.DELETE_CITY,\r\n    id\r\n});\r\n\r\nexport const fetchWeatherPending = (id) => ({\r\n    type: constants.FETCH_WEATHER_PENDING,\r\n    id\r\n});\r\n\r\nexport const fetchWeatherSuccess = (weather, id) => ({\r\n    type: constants.FETCH_WEATHER_SUCCESS,\r\n    id,\r\n    weather\r\n});\r\n\r\nexport const fetchWeatherError = (error, id) => ({\r\n    type: constants.FETCH_WEATHER_ERROR,\r\n    id,\r\n    error\r\n});","import * as constants from '../constants';\r\nimport { combineReducers } from 'C:/Users/leven/AppData/Local/Microsoft/TypeScript/3.6/node_modules/redux';\r\n\r\nconst weatherReducer = (state = constants.INITIAL_STATE.weatherList, action = {}) => {\r\n    let changedCities = [];\r\n\r\n    if (action.id === 0) {\r\n        return state;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case constants.FETCH_WEATHER_PENDING:\r\n            changedCities = state.cities.map(city => \r\n                    city.id === action.id ? {...city, pending: true} : city\r\n                );\r\n            return {\r\n                ...state,\r\n                cities: changedCities\r\n            };\r\n\r\n        case constants.FETCH_WEATHER_SUCCESS:\r\n            changedCities = state.cities.map(city => \r\n                    city.id === action.id ? {...city, pending: false, weather: action.weather} : city\r\n                );\r\n            return {\r\n                ...state,\r\n                cities: changedCities\r\n            };\r\n\r\n        case constants.FETCH_WEATHER_ERROR:\r\n            changedCities = state.cities.map(city => \r\n                    city.id === action.id ? {...city, pending: false, error: action.error} : city\r\n                );\r\n            return {\r\n                ...state,\r\n                cities: changedCities\r\n            };\r\n\r\n        case constants.ADD_CITY:\r\n                changedCities = [\r\n                    ...state.cities,\r\n                    {\r\n                        id: state.nextCityId,\r\n                        name: action.name\r\n                    }\r\n                ] \r\n                return {\r\n                    ...state,\r\n                    nextCityId: state.nextCityId + 1,\r\n                    cities: changedCities\r\n                };\r\n    \r\n            case constants.DELETE_CITY:\r\n                changedCities = state.cities.filter(city => city.id !== action.id);\r\n                return {\r\n                    ...state,\r\n                    cities: changedCities\r\n                };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst currentCityReducer = (state = constants.INITIAL_STATE.currentCity, action = {}) => {\r\n    if (action.id !== 0) {\r\n        return state;\r\n    }\r\n    \r\n    switch (action.type) {\r\n        case constants.FETCH_WEATHER_PENDING:\r\n            return {\r\n                ...state,\r\n                pending: true\r\n            };\r\n\r\n        case constants.FETCH_WEATHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                weather: action.weather\r\n            };\r\n\r\n        case constants.FETCH_WEATHER_ERROR:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                error: action.error\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const getCities = state => state.weatherList.cities;\r\nexport const getNextCityId = state => state.weatherList.nextCityId;\r\nexport const getCurrentCity = state => state.currentCity;\r\n\r\nexport default combineReducers({\r\n    weatherList: weatherReducer,\r\n    currentCity: currentCityReducer\r\n});","import React from \"react\";\r\n\r\nclass AddCity extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.textInput = React.createRef();\r\n    this.handleFormInput = this.handleFormInput.bind(this);\r\n  }\r\n\r\n  handleFormInput(e) {\r\n    e.preventDefault();\r\n    this.props.addCity(this.textInput.current.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"AddCity\">\r\n        <form onSubmit={this.handleFormInput}>\r\n          <input\r\n            id=\"addCity\"\r\n            ref={this.textInput}\r\n            placeholder=\"Add new city\"\r\n            required\r\n          />\r\n          <button type=\"submit\" className=\"circle\">\r\n            +\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddCity;\r\n","import { connect } from \"react-redux\";\r\nimport { addCity } from \"../../store/actions\";\r\nimport AddCity from \"./AddCity\";\r\nimport { getNextCityId, getCities } from \"../../store/reducers\";\r\n\r\nconst mapStateToProps = state => ({\r\n  nextCityId: getNextCityId(state),\r\n  cities: getCities(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addCity: name => dispatch(addCity(name))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCity);\r\n","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nclass Loader extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"Loader\">\r\n        <div>Please wait, data is loading</div>\r\n        <div><i className=\"fas fa-spinner fa-pulse\"></i></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Loader from '../Loader/Loader';\r\nimport './Weather.scss';\r\n\r\nclass Weather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchWeather();\r\n  }\r\n  \r\n  render() {\r\n    const styleWeather = this.props.data.id !== 0 ? {flexDirection: 'column'} : {flexDirection: 'row', width: '100%', fontSize: '30px'};\r\n    const styleMainInfo = this.props.data.id !== 0 ? {flexDirection: 'row'} : {flexDirection: 'column', width: '50%', paddingRight: '20px'};\r\n    const dataRow = this.props.data.id !== 0 ? {width: '100%'} : {width: '50%', paddingLeft: '20px', boxSizing: 'border-box'};\r\n\r\n    if (this.props.data.error) {\r\n      const error = this.props.data.error;\r\n      return (\r\n        <div className=\"Weather\" className='error'>\r\n          {error.response.status === 404 &&\r\n              <div>{this.props.data.name} isn't found</div>\r\n          }\r\n          <button onClick={this.props.deleteCity} className='circle'>x</button>\r\n        </div>\r\n      );\r\n    } else if (this.props.data.pending === false) {\r\n      const data = this.props.data.weather;\r\n\r\n      const temp = `${(data.main.temp < 0 ? '' : '+')}${(data.main.temp).toFixed(1)}°C`;\r\n      const icon = this.props.data.id !== 0 \r\n      ? `https://openweathermap.org/img/wn/${data.weather[0].icon}.png` \r\n      : `https://openweathermap.org/themes/openweathermap/assets/vendor/owm/img/widgets/${data.weather[0].icon}.png`;\r\n      const description = data.weather[0].description[0].toUpperCase() + data.weather[0].description.substr(1);\r\n      const rot = `rotate(${data.wind.deg}deg)`;\r\n      const windDirStyle = {\r\n        WebkitTransform: rot,\r\n        msTransform: rot,\r\n        OTransform: rot,\r\n        transform: rot\r\n      };\r\n      const windSpeed = `${data.wind.speed} m/s`;\r\n      const pressure = `${(data.main.pressure * 0.75006375541921).toFixed(0)} mmHg`;\r\n      const humidity = `${data.main.humidity}%`;\r\n      const coords = [data.coord.lon, data.coord.lat];\r\n\r\n      return (\r\n        <div className=\"Weather\" style={styleWeather}>\r\n          <div className=\"mainInfo\" style={styleMainInfo}>\r\n            <div className={this.props.data.id === 0 ? 'currentName' : 'name'}>{data.name}</div>\r\n            <div className={`${this.props.data.id === 0 ? 'current' : ''} cityMain`} >\r\n              <div className={this.props.data.id === 0 && 'temp'}>{temp}</div>\r\n              <img src={icon} title={description} />\r\n            </div>\r\n            <div className={this.props.data.id === 0 ? 'current' : ''}>\r\n              {this.props.data.id !== 0 && \r\n                <button onClick={this.props.deleteCity} className='circle'>x</button>\r\n              }\r\n            </div>\r\n          </div>\r\n          <div style={dataRow}>\r\n            <div className='row'>\r\n              <div className='rowKey'>Wind:</div>\r\n              <div className='rowVal'>\r\n                <div id='wind'>\r\n                  <div id='N'>N</div>\r\n                  <div id='W'>W</div>\r\n                  <div id='windDirection'><div style={windDirStyle}>↑</div></div>\r\n                  <div id='E'>E</div>\r\n                  <div id='S'>S</div>\r\n                </div>\r\n                {windSpeed} \r\n              </div>\r\n            </div>\r\n            <div className='row'>\r\n              <div className='rowKey'>Clouds:</div>\r\n              <div className='rowVal'>{data.clouds.all}%</div>\r\n            </div>\r\n            <div className='row'>\r\n              <div className='rowKey'>Pressure:</div>\r\n              <div className='rowVal'>{pressure}</div> \r\n            </div>\r\n            <div className='row'>\r\n              <div className='rowKey'>Humidity:</div>\r\n              <div className='rowVal'>{humidity}</div>\r\n            </div>\r\n            <div className='row'>\r\n              <div className='rowKey'>Coords:</div>\r\n              <div className='rowVal'>[{coords[0]}, {coords[1]}]</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"Weather\" style={{justifyContent: 'flex-start'}}>\r\n            {this.props.data.id !== 0 && \r\n              <div style={{padding: '8px'}}>{this.props.data.name}</div>\r\n            }\r\n            <Loader />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport Weather from '../Weather/Weather';\r\n\r\nclass WeatherList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"WeatherList\">\r\n          {this.props.cities.map(city => (\r\n              <Weather key={city.id} data={city} fetchWeather={() => this.props.fetchWeatherByName(city.id, city.name)} deleteCity={() => this.props.deleteCity(city.id)} />\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherList;\r\n","import { connect } from 'react-redux';\r\nimport { fetchWeatherPending, fetchWeatherError, fetchWeatherSuccess, deleteCity } from '../../store/actions';\r\nimport axios from 'axios';\r\nimport WeatherList from './WeatherList';\r\nimport { getCities, getNextCityId } from '../../store/reducers';\r\n\r\nexport const fetchWeatherByNameAction = (dispatch, id, cityName) => {\r\n    dispatch(fetchWeatherPending(id));\r\n    axios\r\n        .get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&APPID=96c2fc4713551153e7966978b449861a`)\r\n        .then(response => {\r\n            dispatch(fetchWeatherSuccess(response.data, id));\r\n            console.log(response.data);\r\n        })\r\n        .catch(error => {\r\n            dispatch(fetchWeatherError(error, id));\r\n            console.log(error);\r\n        });\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cities: getCities(state),\r\n    nextCityId: getNextCityId(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchWeatherByName: (id, name) => fetchWeatherByNameAction(dispatch, id, name),\r\n    deleteCity: id => dispatch(deleteCity(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherList);","import React from 'react';\r\nimport './Clouds.scss';\r\n\r\nconst Clouds = () => {\r\n    let clouds = [];\r\n    for (let i = 1; i <= 10; i++) {\r\n        clouds.push('x' + i);\r\n    }\r\n    clouds = clouds.map((cloud) => \r\n        <div className={`cloud ${cloud}`} key={cloud}></div>\r\n    );\r\n    return (\r\n        <div className=\"clouds\">\r\n            {clouds}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Clouds;","import React from 'react';\r\nimport './App.scss';\r\nimport AddCity from '../AddCity/AddCityContainer';\r\nimport WeatherList from '../WeatherList/WeatherListContainer';\r\nimport Weather from '../Weather/Weather';\r\nimport \"../../../node_modules/@fortawesome/fontawesome-free/css/all.css\";\r\nimport Clouds from '../Clouds/Clouds';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <Clouds />\r\n        <div className=\"App\">\r\n          <div className='control' style={{'width': '67%', alignSelf: 'flex-start'}}>\r\n            <h2>Weather here</h2>\r\n            <button onClick={() => this.props.fetchWeatherByCoords()}>Update geolocation</button>\r\n          </div>\r\n          <Weather key={0} data={this.props.currentCity} fetchWeather={() => this.props.fetchWeatherByCoords()}/>\r\n          <div className='control favourites'>\r\n            <h2>Favorites</h2>\r\n            <AddCity />\r\n          </div>\r\n          <WeatherList />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { connect } from 'react-redux';\r\nimport { fetchWeatherPending, fetchWeatherError, fetchWeatherSuccess } from '../../store/actions';\r\nimport axios from 'axios';\r\nimport { getCurrentCity } from '../../store/reducers';\r\nimport App from './App';\r\nimport { DEFAULT_COORDS } from '../../constants';\r\n\r\nconst fetchWeather = (dispatch, coords, id) => {\r\n    axios\r\n        .get(`https://api.openweathermap.org/data/2.5/weather?lat=${coords.latitude}&lon=${coords.longitude}&units=metric&APPID=96c2fc4713551153e7966978b449861a`)\r\n        .then(response => {\r\n            dispatch(fetchWeatherSuccess(response.data, id));\r\n            console.log(response.data);\r\n        })\r\n        .catch(error => {\r\n            dispatch(fetchWeatherError(error, id));\r\n            console.log(error);\r\n            if (error.response.status === 404) {\r\n            }\r\n        });\r\n}\r\n\r\nexport const fetchWeatherByCoordsAction = (dispatch) => {\r\n    const id = 0;\r\n    const options = {\r\n        enableHighAccuracy: true,\r\n        timeout: 5000,\r\n        maximumAge: 0\r\n    };\r\n\r\n    dispatch(fetchWeatherPending(id));\r\n\r\n    if (!navigator.geolocation) {\r\n        const error = 'Geolocation is not supported';\r\n        dispatch(fetchWeatherError(error, id));\r\n        console.log(error);\r\n    } else {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n            fetchWeather(dispatch, position.coords, id);\r\n        }, err => {\r\n            if (err.code === 1) {\r\n                fetchWeather(dispatch, DEFAULT_COORDS, id);\r\n            } else {\r\n                dispatch(fetchWeatherError(err, id));\r\n                console.warn(`ERROR(${err.code}): ${err.message}`);\r\n            }\r\n        }, options);\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentCity: getCurrentCity(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchWeatherByCoords: () => fetchWeatherByCoordsAction(dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/AppContainer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './store/reducers';\r\nimport {INITIAL_STATE} from './constants';\r\n\r\nconst cities = localStorage['redux-store'] ? JSON.parse(localStorage['redux-store']) : [];\r\nconst nextCityId = cities.reduce((prev, cur) => {\r\n    return Math.max(prev, cur.id);\r\n}, 0) + 1;\r\n\r\nconst state = {\r\n    ...INITIAL_STATE, \r\n    weatherList: {\r\n        ...INITIAL_STATE.weatherList, \r\n        cities, \r\n        nextCityId\r\n    }\r\n};\r\n\r\nconst store = createStore(rootReducer, state, applyMiddleware(thunk));\r\n\r\nstore.subscribe(() => {\r\n    localStorage['redux-store'] = JSON.stringify(store.getState().weatherList.cities.map(city => ({id: city.id, name: city.name})));\r\n});\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}